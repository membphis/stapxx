#!/usr/bin/env stap++

/*
 * Copyright (C) Yichun Zhang (agentzh)
 */

@use nginx.request

global begin_times, pre_end_time
global latencies, sep_latencies
global init_conns
global pid, matched_r, matched_pid, pids
global log_r

probe @pfunc(ngx_http_create_request)
{
    if ($^pid_ok) {
        init_conns[$c, pid()] = gettimeofday_us()
    }
}

probe @pfunc(ngx_http_process_request) {
    if (!matched_pid && $^pid_ok) {
        pid = pid()

        begin_time = init_conns[$r->connection, pid()]
        if (begin_time) {
            %( "$^arg_uri :default()" == "" %?
                matched_r = $r
                matched_pid = pid
                begin_times[$r] = begin_time

                if (pre_end_time) {
                    sep_latencies <<< begin_times[$r] - pre_end_time
                    pre_end_time = 0
                }

                %:

                if (ngx_req_uri($r) == "$^arg_uri") {
                    matched_r = $r
                    matched_pid = pid
                    begin_times[$r] = begin_time

                    if (pre_end_time) {
                        sep_latencies <<< begin_times[$r] - pre_end_time
                        pre_end_time = 0
                    }
                }
                %)
        }
    }
}

probe @pfunc(ngx_http_log_request) {
    if (pid() == matched_pid && $r == matched_r) {
        log_r = $r
        pids[matched_pid] = pids[matched_pid] + 1
    }
}

probe @pfunc(ngx_http_log_request).return {
    if (pid() == matched_pid && log_r) {
        begin_time = begin_times[log_r]
        if (begin_time) {
            pre_end_time = gettimeofday_us()
            latencies <<< pre_end_time - begin_time
            delete begin_times[log_r]
        }
        delete init_conns
        log_r = 0
    }

    matched_pid = 0
}

probe begin {
    printf("Start tracing process %d ($^exec_path)...\n", target())
    %( "$^arg_time :default()" != ""  %?
    printf("Please wait for $^arg_time seconds...\n")
    %:
    printf("Hit Ctrl-C to end.\n")
    %)
}

%( "$^arg_time" != ""  %?
probe timer.s($^arg_time) {
    exit()
}
%)

probe end {
    count = @count(latencies)
    if (count == 0) {
        printf("\nNo samples found so far.\n")

    } else {
        printf("\nDistribution of the main request latencies (in microseconds) for %d samples:\n",
               count)
        printf("(min/avg/max: %d/%d/%d)\n", @min(latencies), @avg(latencies),
               @max(latencies))
        print(@hist_log(latencies))

        printf("sep (min/avg/max: %d/%d/%d)\n", @min(sep_latencies), @avg(sep_latencies),
               @max(sep_latencies))
        print(@hist_log(sep_latencies))

        printf("pid \n")
        foreach (id in pids) {
            printf("pid: %d  count: %d\n", id, pids[id])
        }

    }
}
